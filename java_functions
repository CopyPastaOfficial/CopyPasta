//SELECTION DE L'IMAGE ET ENVOI A ONACTIVITYRESULTS
Intent galleryIntent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                        // Start the Intent
                        startActivityForResult(galleryIntent, 4);
                        
                        
                        
//ON ACTIVITY RESULT (a combiner avec les autres)
if (requestCode == 4 && resultCode == RESULT_OK){

            Bitmap bitmap = null;
            try {
                bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), data.getData());
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
                StringBuilder b = new StringBuilder();
                byte[] bytes = stream.toByteArray();

                sendMessage(bytes);

                Log.d("MESSAGE","ALL BYTES ARE SENT");

            } catch (IOException e) {
                e.printStackTrace();
            }

        }
        
        
        
//PRISE DE L'IMAGE PAR APPAREIL PHOTO
try {
                            takePhoto();
                        } catch (ActivityNotFoundException | IOException anfe) {
                            Toast toast = Toast.makeText(MainActivity.this, "This device doesn't support the crop action!", Toast.LENGTH_SHORT);
                            toast.show();
                        }
                        
//fonction takephoto



public void takePhoto() throws IOException {
        counter++; //this is an int
        String imageFileName = "JPEG_" + counter; //make a better file name
        File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
        File image = File.createTempFile(imageFileName,
                ".jpg",
                storageDir
        );

        picUri= FileProvider.getUriForFile(MainActivity.this, MainActivity.this.getApplicationContext().getPackageName() + ".provider", new File(image.getPath()));


        Intent takePhotoIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        takePhotoIntent.putExtra(MediaStore.EXTRA_OUTPUT, picUri);
        startActivityForResult(takePhotoIntent, 2);
    }
    
    
    //ONACTIVITY RESULTS
    if (requestCode == 2 && resultCode == RESULT_OK ) {
            //performCrop();

            Bitmap bitmap = null;
            try {
                bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), picUri);
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
                StringBuilder b = new StringBuilder();
                byte[] bytes = stream.toByteArray();

                sendMessage(bytes);

                Log.d("MESSAGE","ALL BYTES ARE SENT");

            } catch (IOException e) {
                e.printStackTrace();
            }

        }
        
        
    
    
    
//FONCTION POUR DEMANDER TOUTES LES AUTORISATIONS (tres pratique)
private void CheckAllPermissions(){
        if ( ContextCompat.checkSelfPermission( this, Manifest.permission.ACCESS_NETWORK_STATE ) != PackageManager.PERMISSION_GRANTED ) {

            ActivityCompat.requestPermissions( this, new String[] {  android.Manifest.permission.ACCESS_NETWORK_STATE  },
                    0 );
        }
        if ( ContextCompat.checkSelfPermission( this, Manifest.permission.ACCESS_WIFI_STATE ) != PackageManager.PERMISSION_GRANTED ) {

            ActivityCompat.requestPermissions( this, new String[] {  Manifest.permission.ACCESS_WIFI_STATE  },
                    0 );
        }
        if ( ContextCompat.checkSelfPermission( this, Manifest.permission.INTERNET ) != PackageManager.PERMISSION_GRANTED ) {

            ActivityCompat.requestPermissions( this, new String[] {  Manifest.permission.INTERNET  },
                    0 );
        }
        if ( ContextCompat.checkSelfPermission( this, Manifest.permission.CAMERA ) != PackageManager.PERMISSION_GRANTED ) {

            ActivityCompat.requestPermissions( this, new String[] {  Manifest.permission.CAMERA  },
                    0 );
        }
        if ( ContextCompat.checkSelfPermission( this, Manifest.permission.READ_EXTERNAL_STORAGE ) != PackageManager.PERMISSION_GRANTED ) {

            ActivityCompat.requestPermissions( this, new String[] {  Manifest.permission.READ_EXTERNAL_STORAGE  },
                    0 );
        }
        if ( ContextCompat.checkSelfPermission( this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED ) {

            ActivityCompat.requestPermissions( this, new String[] {  Manifest.permission.WRITE_EXTERNAL_STORAGE  },
                    0 );
        }
    }
    
    
    
    //ENVOYER UNE PHOTO SOUS FORME DE BYTEARRAY
    //socket for bytes
    private void sendMessage(final byte[] msgbytes) {
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                      //lis l'ip depuis un fichier, à remplacer par ta méthode pour l'IP, le port ne change pas
                        Socket socket = new Socket(readFromFile(MainActivity.this, "IP.Blue"), 8836);

                        DataOutputStream dOut = new DataOutputStream(socket.getOutputStream());
                        dOut.write(msgbytes);
                        dOut.close();
                        socket.close();
                    } catch (java.io.IOException e) {
                        e.printStackTrace();
                    }
                }
            });
            thread.start();

        }
        
        
  //ENVOYER DU TEXTE
  
  /socket for String
    private void sendMessage(final String msg) {
        Log.d("MSG",msg);

            final Handler handler = new Handler();
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {

                    try {
                        //lis l'ip depuis un fichier, à remplacer par ta méthode pour l'IP, le port ne change pas

                        Socket s = new Socket(readFromFile(MainActivity.this, "IP.Blue"), 8835);

                        OutputStream out = s.getOutputStream();

                        PrintWriter output = new PrintWriter(out);

                        output.println(msg);
                        output.flush();
                        Log.d("MSG", "msg sent");
                        BufferedReader input = new BufferedReader(new InputStreamReader(s.getInputStream()));
                        final String st = input.readLine();
                    /*if(st.contains("OK")){
                        Toast.makeText(MainActivity.this, "Scan sent !", Toast.LENGTH_SHORT).show();
                    }*/
                        output.close();
                        out.close();
                        s.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });

            thread.start();
    }
  
  
  
  
  
  
  
  //LIRE DANS UN FICHIER PRIVE DE l'APP
  private String readFromFile(Context context, String FileName) {

        String ret = "";

        try {
            InputStream inputStream = context.openFileInput(FileName);

            if ( inputStream != null ) {
                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                String receiveString = "";
                StringBuilder stringBuilder = new StringBuilder();

                while ( (receiveString = bufferedReader.readLine()) != null ) {
                    stringBuilder.append("\n").append(receiveString);
                }

                inputStream.close();
                ret = stringBuilder.toString().replaceAll("\n","");
            }
        }
        catch (FileNotFoundException e) {
            Log.e("login activity", "File not found: " + e.toString());
        } catch (IOException e) {
            Log.e("login activity", "Can not read file: " + e.toString());
        }

        return ret;
    }
    
    
    
    //ECRIRE DANS UN FICHIER PRIVE DE L'APP
     private void writeToFile(String data, Context context,String FileName) {
        try {
            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(context.openFileOutput(FileName, Context.MODE_PRIVATE));
            outputStreamWriter.write(data);
            outputStreamWriter.close();
        }
        catch (IOException e) {
            Log.e("Exception", "File write failed: " + e.toString());
        }
    }

  
 
